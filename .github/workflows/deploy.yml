name: 🚀 Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permite ejecución manual

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔍 Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
        
    - name: ✅ Test application startup
      run: |
        echo "Testing application can start..."
        python -c "
        import sys
        sys.path.append('.')
        try:
            from wsgi import application
            print('✅ WSGI application loads successfully')
        except Exception as e:
            print(f'❌ Error loading WSGI application: {e}')
            sys.exit(1)
        "

  validate-config:
    name: 🔧 Validate Configuration
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Validate render.yaml
      run: |
        echo "Validating render.yaml configuration..."
        
        # Check if render.yaml exists
        if [ ! -f "render.yaml" ]; then
          echo "❌ render.yaml not found"
          exit 1
        fi
        
        # Check for required fields
        if grep -q "gunicorn --bind 0.0.0.0:\$PORT wsgi:application" render.yaml; then
          echo "✅ Correct start command found"
        else
          echo "❌ Incorrect or missing start command"
          exit 1
        fi
        
        if grep -q "type: web" render.yaml; then
          echo "✅ Web service type configured"
        else
          echo "❌ Web service type not configured"
          exit 1
        fi
        
        if grep -q "DATABASE_URL" render.yaml; then
          echo "✅ Database URL configuration found"
        else
          echo "❌ Database URL configuration missing"
          exit 1
        fi
        
        echo "✅ render.yaml validation passed"
        
    - name: 🔍 Validate required files
      run: |
        echo "Checking required files..."
        
        REQUIRED_FILES=("wsgi.py" "server.py" "requirements.txt" "database_postgres.py")
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All required files present"

  deploy-notification:
    name: 📢 Deployment Ready
    runs-on: ubuntu-latest
    needs: [test, validate-config]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🎉 Deployment Ready Notification
      run: |
        echo "🚀 DEPLOYMENT READY!"
        echo "==================="
        echo ""
        echo "✅ All tests passed"
        echo "✅ Configuration validated"
        echo "✅ Code pushed to main branch"
        echo ""
        echo "🌐 Next steps:"
        echo "1. Go to: https://dashboard.render.com"
        echo "2. Your service should auto-deploy from this commit"
        echo "3. If this is the first deployment:"
        echo "   - Click 'New +' → 'Web Service'"
        echo "   - Select repository: ${{ github.repository }}"
        echo "   - Render will detect render.yaml automatically"
        echo "   - Click 'Create Web Service'"
        echo ""
        echo "📊 Commit Info:"
        echo "- SHA: ${{ github.sha }}"
        echo "- Message: ${{ github.event.head_commit.message }}"
        echo "- Author: ${{ github.event.head_commit.author.name }}"
        echo ""
        echo "🔗 Repository: https://github.com/${{ github.repository }}"
        
    - name: 📝 Create deployment summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # 🚀 Deployment Status
        
        ## ✅ Ready for Render Deployment
        
        Your application has passed all checks and is ready to deploy!
        
        ### 📋 Validation Results
        - ✅ **Tests**: All tests passed
        - ✅ **Configuration**: render.yaml validated
        - ✅ **Files**: All required files present
        - ✅ **Dependencies**: requirements.txt verified
        
        ### 🌐 Deploy to Render
        1. Visit [Render Dashboard](https://dashboard.render.com)
        2. Create new Web Service (if first time)
        3. Select repository: `${{ github.repository }}`
        4. Render will auto-detect configuration
        5. Click "Create Web Service"
        
        ### 📊 Commit Details
        - **SHA**: `${{ github.sha }}`
        - **Branch**: `${{ github.ref_name }}`
        - **Author**: ${{ github.event.head_commit.author.name }}
        
        ---
        *Automated deployment validation completed at ${{ github.event.head_commit.timestamp }}*
        EOF

  # Job opcional para notificaciones (requiere configuración de secrets)
  notify-slack:
    name: 📱 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-notification]
    if: github.ref == 'refs/heads/main' && false  # Deshabilitado por defecto
    
    steps:
    - name: 📱 Send Slack notification
      # Este job está deshabilitado por defecto
      # Para habilitarlo, cambia "false" por "true" arriba y configura SLACK_WEBHOOK_URL
      run: |
        echo "Slack notifications disabled"
        echo "To enable: set SLACK_WEBHOOK_URL secret and change condition above"